name: Build and Deploy Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Docker image SHA256 digest
        id: get-image-digest
        run: |
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }})
          echo "::set-output name=image_digest::$IMAGE_DIGEST"

      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_DIGEST: ${{ steps.get-image-digest.outputs.image_digest }}
        working-directory: mywebsite
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_DIGEST .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_DIGEST

  deploy_to_eks:
    runs-on: ubuntu-latest
    needs: build_and_push  # Wait for build_and_push job to complete successfully

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials for EKS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Create EKS Cluster
        run: |
          eksctl create cluster --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --nodegroup-name linux-nodes --node-type t2.micro --nodes 2 --nodes-min 1 --nodes-max 3 --managed

      - name: Configure kubectl
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Get Docker image SHA256 digest from ECR
        id: get-ecr-image-digest
        run: |
          IMAGE_DIGEST=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} --image-ids imageTag=latest --query 'images[0].imageDigest' --output text --region ${{ secrets.AWS_REGION }})
          echo "::set-output name=image_digest::$IMAGE_DIGEST"

      - name: Deploy to EKS
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_DIGEST: ${{ steps.get-ecr-image-digest.outputs.image_digest }}
        run: |
          kubectl apply -f mywebsite/deployment.yml
          kubectl apply -f mywebsite/service.yml


          kubectl apply -f mywebsite/service.yml
